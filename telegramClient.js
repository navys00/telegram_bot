require('dotenv').config();
const { TelegramClient } = require("telegram");
const { NewMessage } = require("telegram/events");
const { StringSession } = require("telegram/sessions");
const Tesseract = require('tesseract.js');
const input = require("input");
const fs = require("fs");
const {Jimp, JimpMime }= require("jimp");
const fileType = require('file-type');

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const stringSession = new StringSession(process.env.SESSION);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ 200x200 –ø–∏–∫—Å–µ–ª–µ–π –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function cropTo200x200(buffer) {
  try {
    if (!buffer || !Buffer.isBuffer(buffer)) {
      throw new Error("–ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!");
    }

    const type = await fileType.fileTypeFromBuffer(buffer);
    if (!type || !type.mime.startsWith('image/')) {
      throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: ${type?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    }

    const image = await Jimp.read(buffer);

    const { width, height } = image.bitmap;
    // console.log(image.bitmap.width,image.bitmap.height)
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ 200x200
    let cropX = 0;
    let cropY = 0;
    let cropWidth = 200;
    let cropHeight = 200;

    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ 200x200, –æ–±—Ä–µ–∑–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    if (width > 200) {
      cropX = Math.floor((width - 200) / 2);
    } else {
      cropWidth = width;
    }

    if (height > 200) {
      cropY = Math.floor((height - 200) / 2);
    } else {
      cropHeight = height;
    }

    // –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const croppedImage = image.crop(cropX, cropY, cropWidth, cropHeight);

    // –ï—Å–ª–∏ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 200x200, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
    if (cropWidth < 200 || cropHeight < 200) {
      croppedImage.resize(200, 200,);
    }
    const processedBuffer = await croppedImage.getBuffer(JimpMime.jpeg)
    // return new Promise((resolve, reject) => {
    //   croppedImage
    //     .getBuffer('image/jpeg')
    //     .then(croppedBuffer => resolve(croppedBuffer))
    //     .catch(err => reject(err));
    // });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
    console.error(err.stack)
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ grayscale)
async function preprocessImage(buffer) {
  try {
    if (!buffer || !Buffer.isBuffer(buffer)) {
      throw new Error("–ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!");
    }

    const type = await fileType.fileTypeFromBuffer(buffer);
    if (!type || !type.mime.startsWith('image/')) {
      throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: ${type?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    }

    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 200x200
    const croppedBuffer = await cropTo200x200(buffer);
    const image = await Jimp.read(croppedBuffer);

    return new Promise((resolve, reject) => {
      image
        .greyscale() // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
        .contrast(1)
        .brightness(1.2)
        
        .getBuffer('image/jpeg')
        .then(processedBuffer => resolve(processedBuffer))
        .catch(err => reject(err));
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
    throw err;
  }
}

(async () => {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
    phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
  });

  console.log("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!");

  try {
    const channel = await client.getEntity("primerABCD");

    client.addEventHandler(
      async (event) => {
        const msg = event.message;
        console.log("–ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ:", msg.message || '<media or unnamed>');

        if (msg.photo) {
          try {
            const downloadDir = "./downloads";
            if (!fs.existsSync(downloadDir)) fs.mkdirSync(downloadDir);

            const buffer = await client.downloadMedia(msg);
            if (!buffer || !Buffer.isBuffer(buffer) || buffer.length < 100) {
              throw new Error("‚ùå –°–∫–∞—á–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ!");
            }

            const type = await fileType.fileTypeFromBuffer(buffer);
            
            if (!type || !type.mime.startsWith('image/')) {
              throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: ${type?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            }

            const filename = `${downloadDir}/photo_${Date.now()}.${type.ext}`;
            fs.writeFileSync(filename, buffer);

            console.log("üìÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–µ–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 200x200...");
            const croppedBuffer = await cropTo200x200(buffer);
            const croppedFilename = `${downloadDir}/cropped_${Date.now()}.jpg`;
            fs.writeFileSync(croppedFilename, croppedBuffer);

            console.log("üìÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");
            const processedBuffer = await preprocessImage(buffer);

            const processedFilename = `${downloadDir}/processed_${Date.now()}.png`;
            fs.writeFileSync(processedFilename, processedBuffer);

            console.log("üìÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...");
            const { data: { text } } = await Tesseract.recognize(
              processedBuffer,
              'eng+rus',
              {
                config: {
                  psm: 6,
                }
              }
            );

            const cleanedText = text
              .replace(/[^\w\s.,?!‚Äî\u0400-\u04FF]/g, '')
              .replace(/\s+/g, ' ')
              .trim();

            console.log("üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n", cleanedText);

            await client.sendMessage("me", {
              message: `üîî –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ "${channel.title}"\n\nüìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n${cleanedText || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}\n\n‚úÇÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å 200x200 –ø–∏–∫—Å–µ–ª–µ–π`,
              file: croppedFilename
            });

          } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
          }
        }

        if (msg.media && !msg.photo) {
          await client.forwardMessages("me", {
            messages: [msg],
            fromPeer: channel
          });
        } else if (!msg.photo) {
          await client.sendMessage("me", {
            message: `üîî –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ "${channel.title}":\n\n${msg.message}`
          });
        }
      },
      new NewMessage({ chats: [channel.id] })
    );

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞:", err);
  }

})();



// const fs = require("fs");
// const {Jimp} = require("jimp");
// async function f(){

// const path = "./downloads/photo_1752238914535.jpg";
// const buffer = fs.readFileSync(path);
// // const image = await Jimp.fromBuffer(buffer);
// const image = await Jimp.read("./downloads/photo_1752238914535.jpg");

// // const buffer = await fs.readFile("photo_1752238914536.png");
// // const image =await Jimp.read("photo_1752238914536.png");
// // image.greyscale()
// }


// f()
