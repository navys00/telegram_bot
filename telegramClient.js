
// const { TelegramClient } = require("telegram");
// const { StringSession } = require("telegram/sessions");
// const input = require("input"); // npm install input

// const apiId = parseInt(process.env.API_ID) // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
// const apiHash = process.env.API_HASH; // ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
// const stringSession = new StringSession(process.env.SESSION); // –ø—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è

// (async () => {
//   const client = new TelegramClient(stringSession, apiId, apiHash, {
//     connectionRetries: 5,
//   });

//   console.log("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...");

//   await client.start({
//     phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
//     phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
//     phoneCode: async () =>
//       await input.text("Please enter the code you received: "),
//     onError: (err) => console.log(err),
//   });

//   console.log("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!");
//   console.log("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –±–µ–∑ –∫–æ–¥–∞:", client.session.save());

//   await client.sendMessage("me", { message: "–ü—Ä–∏–≤–µ—Ç –æ—Ç Telegram-–∫–ª–∏–µ–Ω—Ç–∞!" });


//   try {
//     // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–æ username
//     const channel = await client.getEntity("primerABCD");

//     console.log(`–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${channel.title}`);

//     // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
//     client.addEventHandler(async (event) => {
//       if (event.isNewMessage && event.chatId === channel.id) {
//         const message = event.message;

//         console.log("–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ:", message.message);

//         // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–µ–±–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
//         await client.sendMessage("me", {
//           message: `üîî –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ "${channel.title}":\n\n${message.message}`
//         });
//       }
//     }, {});

//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:", error);
//   }
// })();


require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const { NewMessage } = require("telegram/events");
const input = require("input"); // npm install input

// –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const downloadDir = path.resolve(__dirname, 'downloads');
if (!fs.existsSync(downloadDir)) {
  fs.mkdirSync(downloadDir, { recursive: true });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
const apiId = parseInt(process.env.API_ID); // ‚Üê –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
const apiHash = process.env.API_HASH; // ‚Üê —Å—Ç—Ä–æ–∫–∞
const stringSession = new StringSession(process.env.SESSION || ""); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é

(async () => {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  console.log("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...");

  await client.start({
    phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
    phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
    onError: (err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:", err),
  });

  console.log("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!");
  console.log("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –±–µ–∑ –∫–æ–¥–∞:", client.session.save());
  if (!process.env.SESSION) {
    console.log("–û–±–Ω–æ–≤–∏—Ç–µ SESSION –≤ .env —Å–ª–µ–¥—É—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:");
    console.log(client.session.save());
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ
  await client.sendMessage("me", { message: "–ü—Ä–∏–≤–µ—Ç –æ—Ç Telegram-–∫–ª–∏–µ–Ω—Ç–∞!" });

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–æ username
    const channel = await client.getEntity("primerABCD");
    console.log(`–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${channel.title}`);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
    client.addEventHandler(
      async (event) => {
        const msg = event.message;
        console.log("–ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ:", msg.message || '<media or unnamed>');

        // –õ–æ–≥–∏—Ä—É–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (msg.photo) {
          console.log("üöÄ –≠—Ç–æ—Ç –ø–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –°–∫–∞—á–∏–≤–∞–µ–º...");
          try {
            // GramJS: –ø–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Message –∏ –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            const filePath = await client.downloadMedia(msg, downloadDir);
            console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: ${filePath}`);
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
          }
        }

        // –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (msg.media) {
          await client.forwardMessages(
            "me",                // –∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
            { messages: [msg], fromPeer: channel }
          );
        } else {
          // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç
          await client.sendMessage("me", {
            message: `üîî –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ "${channel.title}":\n\n${msg.message}`
          });
        }
      },
      new NewMessage({ chats: [channel.id] })
    );

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:", error);
  }

})();