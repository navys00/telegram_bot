require('dotenv').config();
const { TelegramClient } = require("telegram");
const { NewMessage } = require("telegram/events");
const { StringSession } = require("telegram/sessions");
const Tesseract = require('tesseract.js');
const input = require("input");
const fs = require("fs");
const { Jimp, JimpMime } = require("jimp");
const fileType = require('file-type');

const apiId = parseInt(process.env.API_ID);
const apiHash = process.env.API_HASH;
const stringSession = new StringSession(process.env.SESSION);



async function cropFromTop(buffer, topMargin = 0,rightMargin = 0) {
  try {
    if (!buffer || !Buffer.isBuffer(buffer)) {
      throw new Error("–ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!");
    }

    const type = await fileType.fileTypeFromBuffer(buffer);
    if (!type || !type.mime.startsWith('image/')) {
      throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: ${type?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    }

    const image = await Jimp.read(buffer);
    const { width, height } = image.bitmap;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    if (typeof topMargin !== 'number' || topMargin < 0) {
      throw new Error("–û—Ç—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –≤—ã—Å–æ—Ç–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const safeMargin = Math.min(topMargin, height - 1); // —á—Ç–æ–±—ã –≤—ã—Å–æ—Ç–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è > 0
    const safeRightMargin = Math.min(rightMargin, width - 1)
    const cropWidth = width - safeRightMargin;
    const cropY = safeMargin;
    const cropHeight = height -950;

    if (cropHeight <= 0) {
      throw new Error("–û—Ç—Å—Ç—É–ø –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤—ã—Å–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    }

    // –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const croppedImage = image.crop({
      x: 0,
      y: cropY,
      w: cropWidth,
      h: cropHeight
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    return await croppedImage.getBuffer(JimpMime.png);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–æ–º:", err);
    throw err;
  }
}
// –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function preprocessImage(buffer) {
  try {
    if (!buffer || !Buffer.isBuffer(buffer)) {
      throw new Error("–ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!");
    }

    const type = await fileType.fileTypeFromBuffer(buffer);
    if (!type || !type.mime.startsWith('image/')) {
      throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: ${type?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    }

    const image = await Jimp.read(buffer);
    let tmp_mime=''
    if(image.hasAlpha()){
      tmp_mime=JimpMime.png
    } 
    else{
      tmp_mime=JimpMime.jpeg
    }
    return await image
    .greyscale()
      .brightness(1)
      .color([                          // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–µ–ª—ë–Ω–æ–≥–æ
      { apply: 'green', params: [0.3] }
    ])
    
      // .threshold({ max: 120 })
      .getBuffer(tmp_mime);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:", err);
    throw err;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
(async () => {
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
    phoneCode: async () => await input.text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
  });

  console.log("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!");

  try {
    const channel = await client.getEntity("primerABCD");

    client.addEventHandler(
      async (event) => {
        const msg = event.message;
        console.log("–ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ:", msg.message || '<media or unnamed>');

        if (msg.photo) {
          try {
            const downloadDir = "./downloads";
            if (!fs.existsSync(downloadDir)) fs.mkdirSync(downloadDir);

            const buffer = await client.downloadMedia(msg);
            if (!buffer || !Buffer.isBuffer(buffer) || buffer.length < 100) {
              throw new Error("‚ùå –°–∫–∞—á–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ!");
            }

            const type = await fileType.fileTypeFromBuffer(buffer);
            if (!type || !type.mime.startsWith('image/')) {
              throw new Error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: ${type?.mime || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const filename = `${downloadDir}/photo_${Date.now()}.${type.ext}`;
            fs.writeFileSync(filename, buffer);

            // –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            console.log("‚úÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–µ–∑–∫—É –¥–æ 200x200...");
            const croppedBuffer = await cropFromTop(buffer,310,120); //–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å 80, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—á–µ—Ç
            // const croppedFilename = `${downloadDir}/cropped_${Date.now()}.jpg`;
            // fs.writeFileSync(croppedFilename, buffer);

            // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            console.log("üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");
            const processedBuffer = await preprocessImage(croppedBuffer);
            const processedFilename = `${downloadDir}/processed_${Date.now()}.jpg`;
            fs.writeFileSync(processedFilename, processedBuffer);

            // –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            console.log("üìÑ –ù–∞—á–∏–Ω–∞–µ–º OCR...");
            const result = await Tesseract.recognize(
              processedBuffer,
              'eng+rus',
              {
                config: {
                  psm: 6,
                  oem: 1,
                  tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789.,-‚Äî:;()"\'¬´¬ª‚Ä¶()!?'
                }
              }
            );

            const rawText = result?.data?.text || '';
            const cleanedText = rawText
              .replace(/[^\w\s.,?!‚Äî\u0400-\u04FF]/g, '')
              .replace(/\s+/g, ' ')
              .trim();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (cleanedText.length > 0) {
              console.log(cleanedText)
            } else {
              console.log("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏");
              await client.sendMessage("me", {
                message: `üîî –í "${channel.title}" –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.`,
                file: processedFilename
              });
            }

          } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
          }
        }

        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞
        if (msg.media && !msg.photo) {
          await client.forwardMessages("me", {
            messages: [msg],
            fromPeer: channel
          });
        } else if (!msg.photo) {
          await client.sendMessage("me", {
            message: `üîî –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ "${channel.title}":\n\n${msg.message}`
          });
        }
      },
      new NewMessage({ chats: [channel.id] })
    );

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º:", err);
  }

})();

